Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> empty
Rule 3     empty -> <empty>
Rule 4     expression -> expression COMMA expression
Rule 5     expression -> ID ASSIGN type
Rule 6     type -> type LPAREN option RPAREN
Rule 7     type -> TYPE
Rule 8     type -> LBRACE expression RBRACE
Rule 9     type -> TYPE LSQUARE RSQUARE
Rule 10    option -> option COMMA option
Rule 11    option -> ID ASSIGN VALUE

Terminals, with rules where they appear

ASSIGN               : 5 11
COMMA                : 4 10
ID                   : 5 11
LBRACE               : 8
LPAREN               : 6
LSQUARE              : 9
RBRACE               : 8
RPAREN               : 6
RSQUARE              : 9
TYPE                 : 7 9
VALUE                : 11
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 2
expression           : 1 4 4 8
option               : 6 10 10
type                 : 5 6

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . empty
    (4) expression -> . expression COMMA expression
    (5) expression -> . ID ASSIGN type
    (3) empty -> .

    ID              shift and go to state 4
    $end            reduce using rule 3 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (4) expression -> expression . COMMA expression

    $end            reduce using rule 1 (calc -> expression .)
    COMMA           shift and go to state 5


state 3

    (2) calc -> empty .

    $end            reduce using rule 2 (calc -> empty .)


state 4

    (5) expression -> ID . ASSIGN type

    ASSIGN          shift and go to state 6


state 5

    (4) expression -> expression COMMA . expression
    (4) expression -> . expression COMMA expression
    (5) expression -> . ID ASSIGN type

    ID              shift and go to state 4

    expression                     shift and go to state 7

state 6

    (5) expression -> ID ASSIGN . type
    (6) type -> . type LPAREN option RPAREN
    (7) type -> . TYPE
    (8) type -> . LBRACE expression RBRACE
    (9) type -> . TYPE LSQUARE RSQUARE

    TYPE            shift and go to state 9
    LBRACE          shift and go to state 10

    type                           shift and go to state 8

state 7

    (4) expression -> expression COMMA expression .
    (4) expression -> expression . COMMA expression

    COMMA           reduce using rule 4 (expression -> expression COMMA expression .)
    $end            reduce using rule 4 (expression -> expression COMMA expression .)
    RBRACE          reduce using rule 4 (expression -> expression COMMA expression .)

  ! COMMA           [ shift and go to state 5 ]


state 8

    (5) expression -> ID ASSIGN type .
    (6) type -> type . LPAREN option RPAREN

    COMMA           reduce using rule 5 (expression -> ID ASSIGN type .)
    $end            reduce using rule 5 (expression -> ID ASSIGN type .)
    RBRACE          reduce using rule 5 (expression -> ID ASSIGN type .)
    LPAREN          shift and go to state 11


state 9

    (7) type -> TYPE .
    (9) type -> TYPE . LSQUARE RSQUARE

    LPAREN          reduce using rule 7 (type -> TYPE .)
    COMMA           reduce using rule 7 (type -> TYPE .)
    $end            reduce using rule 7 (type -> TYPE .)
    RBRACE          reduce using rule 7 (type -> TYPE .)
    LSQUARE         shift and go to state 12


state 10

    (8) type -> LBRACE . expression RBRACE
    (4) expression -> . expression COMMA expression
    (5) expression -> . ID ASSIGN type

    ID              shift and go to state 4

    expression                     shift and go to state 13

state 11

    (6) type -> type LPAREN . option RPAREN
    (10) option -> . option COMMA option
    (11) option -> . ID ASSIGN VALUE

    ID              shift and go to state 15

    option                         shift and go to state 14

state 12

    (9) type -> TYPE LSQUARE . RSQUARE

    RSQUARE         shift and go to state 16


state 13

    (8) type -> LBRACE expression . RBRACE
    (4) expression -> expression . COMMA expression

    RBRACE          shift and go to state 17
    COMMA           shift and go to state 5


state 14

    (6) type -> type LPAREN option . RPAREN
    (10) option -> option . COMMA option

    RPAREN          shift and go to state 18
    COMMA           shift and go to state 19


state 15

    (11) option -> ID . ASSIGN VALUE

    ASSIGN          shift and go to state 20


state 16

    (9) type -> TYPE LSQUARE RSQUARE .

    LPAREN          reduce using rule 9 (type -> TYPE LSQUARE RSQUARE .)
    COMMA           reduce using rule 9 (type -> TYPE LSQUARE RSQUARE .)
    $end            reduce using rule 9 (type -> TYPE LSQUARE RSQUARE .)
    RBRACE          reduce using rule 9 (type -> TYPE LSQUARE RSQUARE .)


state 17

    (8) type -> LBRACE expression RBRACE .

    LPAREN          reduce using rule 8 (type -> LBRACE expression RBRACE .)
    COMMA           reduce using rule 8 (type -> LBRACE expression RBRACE .)
    $end            reduce using rule 8 (type -> LBRACE expression RBRACE .)
    RBRACE          reduce using rule 8 (type -> LBRACE expression RBRACE .)


state 18

    (6) type -> type LPAREN option RPAREN .

    LPAREN          reduce using rule 6 (type -> type LPAREN option RPAREN .)
    COMMA           reduce using rule 6 (type -> type LPAREN option RPAREN .)
    $end            reduce using rule 6 (type -> type LPAREN option RPAREN .)
    RBRACE          reduce using rule 6 (type -> type LPAREN option RPAREN .)


state 19

    (10) option -> option COMMA . option
    (10) option -> . option COMMA option
    (11) option -> . ID ASSIGN VALUE

    ID              shift and go to state 15

    option                         shift and go to state 21

state 20

    (11) option -> ID ASSIGN . VALUE

    VALUE           shift and go to state 22


state 21

    (10) option -> option COMMA option .
    (10) option -> option . COMMA option

    RPAREN          reduce using rule 10 (option -> option COMMA option .)
    COMMA           reduce using rule 10 (option -> option COMMA option .)

  ! COMMA           [ shift and go to state 19 ]


state 22

    (11) option -> ID ASSIGN VALUE .

    RPAREN          reduce using rule 11 (option -> ID ASSIGN VALUE .)
    COMMA           reduce using rule 11 (option -> ID ASSIGN VALUE .)

